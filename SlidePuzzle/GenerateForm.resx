<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAw5Z4EcmefKHJm3ihw5Z4EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAqqpVA8eZeW7KnXzo16+N/NSqg/3KnHrryJt2cKqqVQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMOXeEDJnHvc27aU8vzkvv/nx6L/4byQ//PUo//btIryyJx54saXd0cAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMaXcRvLnX2006qI7ffdt///6ML//+jC/+fHov/hvJD/9dak//XWpP/vz57/1KqD7Mmc
        eMPHl3ggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMaOcQnInHmBzKB+6e7Qq/3/6ML//+jC///owv//6ML/58ei/+G8kP/11qT/9dak//XW
        pP/11qT/6caY/suge+vJmniTv5VqDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADGmXlQyZ184+LAnff+58D//+jC///owv//6ML//+jC///owv/nx6L/4byQ//XW
        pP/11qT/9dak//XWpP/11qT/9NWj/+C8kPjJnXjnxpp4Yv//AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADGmXMoyp98ydiwju/64bv//+jC///owv//6ML//+jC///owv//6ML//+jC/+fH
        ov/hvJD/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//LSoP/Wr4bvyJ150MOYci8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAyp99j8+mhOz02bP//+jC///owv//6ML//+jC///owv//6ML//+jC///o
        wv//6ML/58ei/+G8kP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//XWpP/sypv/zaN97Mmc
        eI4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJnn3b/ebA///owv//6ML//+jC///owv//6ML//+jC///o
        wv//6ML//+jC///owv/nx6L/4byQ//XWpP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//XW
        pP/z1KP/yZ142gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMmee9v95sD//+jC///owv//6ML//+jC///o
        wv//6ML//+jC///owv//6ML//+jC/+fHov/hvJD/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//XW
        pP/11qT/9dak//PUo//JnHjaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyZ572/3mwP//6ML//+jC///o
        wv//6ML//+jC///owv//6ML//+jC///owv//6ML/58ei/+G8kP/11qT/9dak//XWpP/11qT/9dak//XW
        pP/11qT/9dak//XWpP/11qT/89Sj/8mceNoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJn3za/ebA///o
        wv//6ML//+jC///owv//6ML//+jC///owv//6ML//+jC///owv/nx6L/4byQ//XWpP/11qT/9dak//XW
        pP/11qT/9dak//XWpP/11qT/9dak//XWpP/z1KP/yZx42gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMmf
        fNr95sD//+jC///owv//6ML//+jC///owv//6ML//+jC///owv//6ML//+jC/+fHov/hvJD/9dak//XW
        pP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//PUo//JnHjaAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAyZ582v3mwP//6ML//+jC///owv//6ML//+jC///owv//6ML//+jC///owv//6ML/58ei/+G8
        kP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/89Sj/8mcedkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADJnnza/ebA///owv//6ML//+jC///owv//6ML//+jC///owv//6ML//+jC///o
        wv/lw5//37mO//XWpP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//XWpP/z1KP/yZx52QAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMmefNr95sD//+jC///owv//6ML//+jC///owv//6ML//+jC///o
        wv/64bz/2rSR8c+nh+zOpoTr1q2F7/HQoP/11qT/9dak//XWpP/11qT/9dak//XWpP/11qT/9dak//PU
        o//JnHnZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyZ582v3mwP//6ML//+jC///owv//6ML//+jC///o
        wv/+5sH/5sah+Myif/Hoza/z//DV///w1v/s1Lf3zKJ+8d63jfbz1KL/9dak//XWpP/11qT/9dak//XW
        pP/11qT/89Sj/8mceNkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJnnza/ebA///owv//6ML//+jC///o
        wv//6ML/79Kt/s2jgPHfvp/s/e3T///w1v//8Nb///DW///w1v/+7tT/48Wm78yhffHmw5b99dak//XW
        pP/11qT/9dak//XWpP/z1KP/yZx42QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMmfe9n95sD//+jC///o
        wv//6ML/9ty3/9Wti+3Vr47r+OXK///w1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb/+efM/9iz
        k+zPpYDw7cuc//XWpP/11qT/9dak//PUo//Jm3jZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyZ972f3m
        wP//6ML//OS+/9+9mfLOpYTv8du+/f/w1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w
        1v//8Nb///DW//Pew/7Qp4Tw2LCI8vPSof/11qT/89Sj/8mbeNkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADJnXvZ/eW//+jJpPnMo4Dx5sqs9//v1f//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w
        1v//8Nb///DW///w1v//8Nb///DW///w1f/q0rX4y6F+8t+5j/jy06L/ypx42AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMmde9nOo4Hz3r2e8fzs0f//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w
        1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v/87NH/3r6d88ygffLJnHjYAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAyJ57i8yjguv04MT+//DW///w1v//8Nb///DW///w1v//8Nb///DW///w
        1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v/038T+zKOC68ib
        eooAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx5V2KcmdesbXspPq+ujO///w1v//8Nb///DW///w
        1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v/76s//2riZ6cie
        fMvDmHIvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMSWdk7InXzg4sOm8/7u
        1P//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v/+7tX/5sus9Mmf
        feTFl3hg//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMaO
        cQnHm3qAy6GA5+7Vufv/8Nb///DW///w1v//8Nb///DW///w1v//8Nb///DW///w1v//8Nb/8Nm9/M2j
        gunInXuRv5VqDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADGl3EbyZx9sNKriur35Mj///DW///w1v//8Nb///DW///w1v//8Nb/+ObL/9ax
        kujJnXzAx5d4IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwpZ1P8idfNrbupzx/OzR///w1v//8Nb//e3T/9/A
        ofLInXzgxpd3RwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqqpVA8eZeW7Knn7o6s+z+urP
        s/vLoH/ryJt7cKqqVQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMOW
        eBHJnnyhyZ58ocOWeBEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////8P///8A///+AH//+AAf/+AAB//AAAH/AAAA/gAAAH4AAAB+AA
        AAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH8AAAD/wA
        AB/+AAB//4AB///gB///8A////w///////8=
</value>
  </data>
</root>